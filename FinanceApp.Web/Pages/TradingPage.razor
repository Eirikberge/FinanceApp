@page "/tradingpage"
@using Newtonsoft.Json
@using System.Text
@using FinanceApp.Models.Dtos
@inject HttpClient Http

<h3>Trading Page</h3>

<form @onsubmit="Search">
	<input type="text" @bind="_searchString" @bind:event="oninput" />
	<button type="submit">Search</button>
</form>

<br/>
<NavLink href="/symbolexamples" class="btn btn-primary">Se aksjer eksempler</NavLink>


@if (_searchedStocks != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Symbol</th>
				<th>Current Price</th>
				<th>Open Price</th>
				<th>Previous Price</th>
				<th>High</th>
				<th>Low</th>
				<th>Percent Change</th>
				<th>Change</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>

			@foreach (var stock in _searchedStocks)
			{
				<tr>
					<td>@_stockName</td>
					<td>@stock.Symbol</td>
					<td>@stock.Current</td>
					<td>@stock.Open</td>
					<td>@stock.Previous</td>
					<td>@stock.High</td>
					<td>@stock.Low</td>
					<td>@stock.PercentChange</td>
					<td>@stock.Change</td>
					<td><button class="btn btn-primary" @onclick='() => ShowBuyStockForm("buy")'>Buy</button></td>
					@if (IsStockOwned(stock.Symbol))
					{
						<td><button class="btn btn-primary" @onclick='() => ShowBuyStockForm("sell")'>Sell</button></td>
					}

				</tr>
				@if (_showBuyForm)
				{
					<div class="buy-form">
						<input type="number" @bind="_insertedQty" placeholder="Enter quantity for @_stockName" />
						<button @onclick="() => ConfirmBuy(stock)">Confirm</button>
					</div>
				}
				@if (_showSellForm)
				{
					<div class="sell-form">
						<input type="number" @bind="_insertedQty" placeholder="Enter quantity for @stock.Symbol" />
						<button @onclick="() => ConfirmSell(stock)">Confirm</button>
					</div>
				}
			}
		</tbody>
	</table>
}



@code {
	private List<Stock> _ownedStocks;
	private List<StockSearchResponseDto> _searchedStocks;
	private List<CompanyInfoDto> _companyInfoList;

	private string _searchString;

	private bool _showBuyForm = false;
	private bool _showSellForm = false;

	private string _stockName;
	private int _insertedQty;

	protected override async Task OnInitializedAsync()
	{
		await LoadStocks();
		await LoadCompanyInfo();
	}

	private async Task LoadStocks()
	{
		var response = await Http.GetAsync("https://localhost:7282/api/stocks");
		if (response.IsSuccessStatusCode)
		{
			_ownedStocks = await response.Content.ReadFromJsonAsync<List<Stock>>();
		}
	}

	private async Task LoadCompanyInfo()
	{
		var response = await Http.GetAsync("https://localhost:7282/CompanyInfo");
		if (response.IsSuccessStatusCode)
		{
			_companyInfoList = await response.Content.ReadFromJsonAsync<List<CompanyInfoDto>>();
		}
	}

	private async Task Search()
	{
		await ShowStockInfo();
	}

	private async Task ShowStockInfo()
	{
		var response = await Http.GetAsync($"https://localhost:7282/GetStockPrice/api/getstockprice/{_searchString.ToUpper()}");
		if (response.IsSuccessStatusCode)
		{

			var jsonResponse = await response.Content.ReadAsStringAsync();
			var responseObject = JsonConvert.DeserializeObject<StockSearchResponseDto>(jsonResponse);

			foreach (var company in _companyInfoList)
			{
				if (responseObject.Symbol == company.Ticker)
				{
					_stockName = company.Name;
				}
			}

			var stock = new StockSearchResponseDto
				{
					Name = _stockName,
					Current = responseObject.Current,
					Open = responseObject.Open,
					Previous = responseObject.Previous,
					High = responseObject.High,
					Low = responseObject.Low,
					Change = responseObject.Change,
					PercentChange = responseObject.PercentChange,
					Symbol = responseObject.Symbol
				};
			_searchedStocks = new List<StockSearchResponseDto> { stock };
		}
	}

	private void ShowBuyStockForm(string buyOrSell = "clear")
	{
		if (buyOrSell == "buy")
		{
			_showSellForm = false;
			_showBuyForm = true;
		}
		else if (buyOrSell == "sell")
		{
			_showBuyForm = false;
			_showSellForm = true;
		}
		else if (buyOrSell == "clear")
		{
			_showBuyForm = false;
			_showSellForm = false;
			_stockName = "";
			_insertedQty = 0;
		}
	}

	private bool IsStockOwned(string symbol) => _ownedStocks?.Any(stock => stock.Symbol == symbol) ?? false;

	private async Task ConfirmBuy(StockSearchResponseDto searchedStock)
	{
		if (IsStockOwned(searchedStock.Symbol))
		{
			if (IsStockOwned(searchedStock.Symbol))
			{
				var previousQty = 0;
				var newBuyingPrice = 0;
				foreach (var stock in _ownedStocks)
				{
					if (stock.Symbol == searchedStock.Symbol)
					{
						previousQty = stock.Qty;
						newBuyingPrice = (((stock.Qty * (int)stock.BuyingPrice)/ stock.Qty) + ((_insertedQty * (int)searchedStock.Current)/_insertedQty))/2;
					}
				}
				var updateModel = new Stock
				{
					Symbol = searchedStock.Symbol,
					Qty = _insertedQty + previousQty,
					BuyingPrice = newBuyingPrice,
				};
				var json = JsonConvert.SerializeObject(updateModel);
				var content = new StringContent(json, Encoding.UTF8, "application/json");

				var stockResponse = await Http.PutAsync($"https://localhost:7282/api/stocks/{updateModel.Symbol}/{updateModel.Qty}", content);
			}
		}
		else
		{
			var addModel = new Stock
				{
					Name = _stockName,
					Symbol = searchedStock.Symbol,
					BuyingPrice = searchedStock.Current,
					Qty = _insertedQty,
				};
			var json = JsonConvert.SerializeObject(addModel);
			var content = new StringContent(json, Encoding.UTF8, "application/json");

			var addedStock = await Http.PostAsync("https://localhost:7282/api/stocks", content);
		}
		ShowBuyStockForm();

	}

	private async Task ConfirmSell(StockSearchResponseDto searchedStock)
	{
		foreach (var ownedStock in _ownedStocks)
		{
			var previousQty = 0;
			if (ownedStock.Symbol == searchedStock.Symbol || ownedStock.Qty > _insertedQty)
			{
				foreach (var stock in _ownedStocks)
				{
					if (stock.Symbol == searchedStock.Symbol)
					{
						previousQty = stock.Qty;
					}
				}
				var updateModel = new Stock
				{
					Symbol = searchedStock.Symbol,
					Qty = previousQty - _insertedQty,
				};
				var json = JsonConvert.SerializeObject(updateModel);
				var content = new StringContent(json, Encoding.UTF8, "application/json");

				var stockResponse = await Http.PutAsync($"https://localhost:7282/api/stocks/{updateModel.Symbol}/{updateModel.Qty}", content);
			}
			else //delete stock
			{
			}
		}
		ShowBuyStockForm();
	}

	private string FormatDateTime(string dateTimeString)
	{
		DateTime time = DateTime.Parse(dateTimeString);
		string formattedTime = time.ToString("HH:mm:ss");
		return formattedTime;
	}
}
