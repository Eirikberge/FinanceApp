@page "/tradingpage"
@using Newtonsoft.Json
@using System.Text
@using FinanceApp.Models.Dtos
@using FinanceApp.Web.Components

@inject HttpClient Http

@inherits TradingBase

<h3>Trading Page</h3>

<SearchBarComponent TEntity="StockPriceCandleDto" OnSearch="ShowStockInfo"></SearchBarComponent>

<br />

<NavLink href="/symbolexamples" class="btn btn-primary">Se aksjer eksempler</NavLink>

@if (_searchedStock != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Symbol</th>
				<th>Current Price</th>
				<th>Open Price</th>
				<th>Previous Price</th>
				<th>High</th>
				<th>Low</th>
				<th>Percent Change</th>
				<th>Change</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>@_stockName</td>
				<td>@_searchedStock.Symbol</td>
				<td>@_searchedStock.Current</td>
				<td>@_searchedStock.Open</td>
				<td>@_searchedStock.Previous</td>
				<td>@_searchedStock.High</td>
				<td>@_searchedStock.Low</td>
				<td>@_searchedStock.PercentChange</td>
				<td>@_searchedStock.Change</td>
				<td><button class="btn btn-primary" @onclick='() => ShowTradeForm("buy")'>Buy</button></td>
				@if (IsStockOwned(_searchedStock.Symbol))
				{
					<td><button class="btn btn-primary" @onclick='() => ShowTradeForm("sell")'>Sell</button></td>
				}
			</tr>
			@if (_showBuyForm)
			{
				<div class="buy-form">
					<input type="number" @bind="_insertedQty" placeholder="Enter quantity for @_stockName" />
					<button @onclick='() => ConfirmTrade("buy")'>Confirm sale</button>
				</div>
			}
			@if (_showSellForm)
			{
				<div class="sell-form">
					<input type="number" @bind="_insertedQty" placeholder="Enter quantity for @_searchedStock.Symbol" />
					<button @onclick='() => ConfirmTrade("sell")'>Confirm sale</button>
				</div>
			}

		</tbody>
	</table>
	@if (_errorMessage != null)
	{
		<div>
			@_errorMessage
		</div>
	}
}

@code {
	private StockPriceCandleDto _searchedStock;
	private bool _showBuyForm = false;
	private bool _showSellForm = false;

	private string _stockName;
	private int _insertedQty;
	private int _searchedAndOwnedStockQuantity;

	private string _errorMessage;

	private async Task ShowStockInfo(string searchString)
	{
		try
		{
			var response = await Http.GetAsync($"https://localhost:7282/api/GetStockPrice/api/getstockprice/{searchString.ToUpper()}");
			if (response.IsSuccessStatusCode)
			{
				var jsonResponse = await response.Content.ReadAsStringAsync();
				var responseObject = JsonConvert.DeserializeObject<StockPriceCandleDto>(jsonResponse);

				_stockName = CompanyInfos.FirstOrDefault(company => responseObject.Symbol == company.Ticker)?.Name;

				var stock = new StockPriceCandleDto
					{
						Current = responseObject.Current,
						Open = responseObject.Open,
						Previous = responseObject.Previous,
						High = responseObject.High,
						Low = responseObject.Low,
						Change = responseObject.Change,
						PercentChange = responseObject.PercentChange,
						Symbol = responseObject.Symbol
					};
				_searchedStock = stock;
			}
			else
			{
				ShowErrorMessage("Ingen aksje ble funnet basert på søket.");
			}
		}
		catch (Exception ex)
		{
		}
	}

	private async Task ConfirmTrade(string trade)
	{
		if (_insertedQty <= _searchedAndOwnedStockQuantity)
		{
			var change = 1;

			if (trade == "sell") change = -1;

			var addTrade = new TradeDto
			{
				UserId = 1,
				StockSymbol = _searchedStock.Symbol,
				Price = _searchedStock.Current,
				Quantity = _insertedQty * change,
				TimeStamp = DateTime.Now
			};
			AddTrade(addTrade);
		}
		else
		{
			ShowErrorMessage("Error: Du eier ikke så mange aksjer");
		}
		ShowTradeForm();
	}

	private void ShowTradeForm(string trade = "clear")
	{
		_showBuyForm = trade == "buy";
		_showSellForm = trade == "sell";
		if (trade == "clear")
		{
			_stockName = "";
			_insertedQty = 0;
		}
	}

	private void ShowErrorMessage(string message)
	{
		_errorMessage = message;
	}

	private bool IsStockOwned(string symbol)
	{
		foreach (var stock in StockHoldings)
		{
			if (stock.StockSymbol == symbol)
			{
				_searchedAndOwnedStockQuantity = stock.Quantity;
				return true;
			}
		}
		return false;
	}
}
