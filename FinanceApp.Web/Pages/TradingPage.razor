@page "/tradingpage"
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http

<h3>Trading Page</h3>

<form @onsubmit="Search">
	<input type="text" @bind="searchString" @bind:event="oninput" />
	<button type="submit">Search</button>
</form>

<p>
</p>
<NavLink href="/symbolexamples" class="btn btn-primary">Se aksjer eksempler</NavLink>


@if (searchedStocks == null)
{

}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Symbol</th>
				<th>Current Price</th>
				<th>Open Price</th>
				<th>Previous Price</th>
				<th>High</th>
				<th>Low</th>
				<th>Percent Change</th>
				<th>Change</th>
				<th>Time</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>

			@foreach (var stock in searchedStocks)
			{
				<tr>
					<td>@stock.Symbol</td>
					<td>@stock.Current</td>
					<td>@stock.Open</td>
					<td>@stock.Previous</td>
					<td>@stock.High</td>
					<td>@stock.Low</td>
					<td>@stock.PercentChange</td>
					<td>@stock.Change</td>
					<td>@FormatDateTime(stock.Time)</td>
					<td><button class="btn btn-primary" @onclick='() => ShowBuyStockForm("buy")'>Buy</button></td>
					@if (IsStockOwned(stock.Symbol))
					{
						<td><button class="btn btn-primary" @onclick='() => ShowBuyStockForm("sell")'>Sell</button></td>
					}

				</tr>
				@if (showBuyForm)
				{
					<div class="buy-form">
						<input type="text" @bind="insertedName" placeholder="Enter stock name for @stock.Symbol" />
						<input type="number" @bind="insertedQty" placeholder="Enter quantity for @stock.Symbol" />
						<button @onclick="() => ConfirmBuy(stock)">Confirm</button>
					</div>
				}
				@if (showSellForm)
				{
					<div class="sell-form">
						<input type="number" @bind="insertedQty" placeholder="Enter quantity for @stock.Symbol" />
						<button @onclick="() => ConfirmSell(stock)">Confirm</button>
					</div>
				}
			}
		</tbody>
	</table>


}



@code {
	private List<StockSearchResponse> searchedStocks;
	public List<Stock> OwnedStocks;

	private string searchString;

	private bool showBuyForm = false;
	private bool showSellForm = false;

	private string insertedName;
	private int insertedQty;

	protected override async Task OnInitializedAsync()
	{
		var response = await Http.GetAsync("https://localhost:7282/api/getstocks");
		if (response.IsSuccessStatusCode)
		{
			OwnedStocks = await response.Content.ReadFromJsonAsync<List<Stock>>();
		}
	}


	async Task Search()
	{
		await ShowStockInfo();
	}

	async Task ShowStockInfo()
	{
		var response = await Http.GetAsync($"https://localhost:7282/stocks/{searchString}");
		if (response.IsSuccessStatusCode)
		{

			var jsonResponse = await response.Content.ReadAsStringAsync();
			var responseObject = JsonConvert.DeserializeObject<StockSearchResponse>(jsonResponse);

			var stock = new StockSearchResponse
				{
					Current = responseObject.Current,
					Open = responseObject.Open,
					Previous = responseObject.Previous,
					High = responseObject.High,
					Low = responseObject.Low,
					Time = responseObject.Time,
					Change = responseObject.Change,
					PercentChange = responseObject.PercentChange,
					Symbol = responseObject.Symbol
				};
			searchedStocks = new List<StockSearchResponse> { stock };
		}
	}

	void ShowBuyStockForm(string buyOrSell = "clear")
	{
		if (buyOrSell == "buy")
		{
			showSellForm = false;
			showBuyForm = true;
		}
		else if (buyOrSell == "sell")
		{
			showBuyForm = false;
			showSellForm = true;
		}
		else if (buyOrSell == "clear")
		{
			showBuyForm = false;
			showSellForm = false;
			insertedName = "";
			insertedQty = 0;
		}
	}

	private bool IsStockOwned(string symbol)
	{
		if (OwnedStocks == null)
		{
			return false;
		}

		foreach (var stock in OwnedStocks)
		{
			if (stock.Symbol == symbol)
			{
				return true;
			}
		}

		return false;
	}

	async Task ConfirmBuy(StockSearchResponse searchedStock)
	{
		if (IsStockOwned(searchedStock.Symbol)) // change quantity
		{
			var previousQty = 0;
			foreach (var stock in OwnedStocks)
			{
				if (stock.Symbol == searchedStock.Symbol)
				{
					previousQty = stock.Qty;
				}
			}
			var updateModel = new StockUpdateQtyModel
				{
					Symbol = searchedStock.Symbol,
					NewQty = insertedQty + previousQty,
				};
			var json = JsonConvert.SerializeObject(updateModel);
			var content = new StringContent(json, Encoding.UTF8, "application/json");

			var stockResponse = await Http.PutAsync("https://localhost:7282/UpdateStock/api/updateqty", content);
			previousQty = 0;
		}
		else
		{
			var addModel = new BuyStockModel
				{
					Name = insertedName,
					Symbol = searchedStock.Symbol,
					BuyingPrice = searchedStock.Current,
					CurrentPrice = searchedStock.Current,
					Qty = insertedQty,
				};
			var json = JsonConvert.SerializeObject(addModel);
			var content = new StringContent(json, Encoding.UTF8, "application/json");

			var addedStock = await Http.PostAsync("https://localhost:7282/AddStock/api/addstock", content);
		}


		ShowBuyStockForm();

	}
	async Task ConfirmSell(StockSearchResponse searchedStock)
	{
		foreach (var ownedStock in OwnedStocks)
		{
			var previousQty = 0;
			if (ownedStock.Symbol == searchedStock.Symbol || ownedStock.Qty > insertedQty) //Reduce the quantity of stocks
			{
				foreach (var stock in OwnedStocks)
				{
					if (stock.Symbol == searchedStock.Symbol)
					{
						previousQty = stock.Qty;
					}
				}
				var updateModel = new StockUpdateQtyModel
					{
						Symbol = searchedStock.Symbol,
						NewQty = previousQty - insertedQty,
					};
				var json = JsonConvert.SerializeObject(updateModel);
				var content = new StringContent(json, Encoding.UTF8, "application/json");

				var stockResponse = await Http.PutAsync("https://localhost:7282/UpdateStock/api/updateqty", content);
				previousQty = 0;
			}
			else
			{
			}
		}
		ShowBuyStockForm();
	}



	string FormatDateTime(string dateTimeString)
	{
		DateTime time = DateTime.Parse(dateTimeString);
		string formattedTime = time.ToString("HH:mm:ss");
		return formattedTime;
	}

	public class Stock
	{
		public string Name { get; set; }
		public string Symbol { get; set; }
		public float BuyingPrice { get; set; }
		public float CurrentPrice { get; set; }
		public int Qty { get; set; }
	}

	public class StockSearchResponse
	{
		public float Current { get; set; }
		public float Open { get; set; }
		public float Previous { get; set; }
		public float High { get; set; }
		public float Low { get; set; }
		public float PercentChange { get; set; }
		public float Change { get; set; }
		public string Time { get; set; }
		public string Symbol { get; set; }
	}

	public class BuyStockModel
	{
		public string Name { get; set; }
		public string Symbol { get; set; }
		public float BuyingPrice { get; set; }
		public float CurrentPrice { get; set; }
		public int Qty { get; set; }
	}

	public class SellStockModel
	{
		public string Symbol { get; set; }
		public int Qty { get; set; }
	}

	public class StockUpdateQtyModel
	{
		public string Symbol { get; set; }
		public int NewQty { get; set; }
	}

}
