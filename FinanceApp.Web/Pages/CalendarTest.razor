@page "/calendartest"
@using System.Net
@using System.Runtime.InteropServices.JavaScript
@using System.Globalization
@inject HttpClient Http

<h3>CalendarTest</h3>

<h2 style="text-align: center;">@GetCalendarHeadline()</h2>
<br /><h4 style="text-align: center;">Uke: @GetWeekNumber()</h4>
<br />

<table class="table table-bordered table-striped">
	<thead>
		<tr>
			@foreach (var day in days)
			{
				<th style="width: @(100 / days.Count())%;">@day</th>
			}
		</tr>
	</thead>
	<tbody>
		@foreach (var week in weeks)
		{
			<tr>
				@foreach (var day in week.Dates)
				{
					<td>
						@day.DateValue
						<br /><br />
						cell number: [Week: @weeks.IndexOf(week), Day: @week.Dates.IndexOf(day)]
					</td>
				}
			</tr>
		}
	</tbody>
</table>

@code {
	List<string> days = new List<string>();
	List<WeekClass> weeks = new List<WeekClass>();
	DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
	DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddDays(34);

	DateTime dateWeek = DateTime.Now;

	protected override void OnInitialized()
	{
		GenerateCalendarHead();
		GenerateCalendarBody();
	}

	private int GetWeekNumber()
	{
		int weekNumber = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(dateWeek, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
		return weekNumber;
	}

	private void GenerateCalendarHead()
	{
		var day1 = new List<string>();
		for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
		{
			day1.Add(dt.ToString("dddd"));
		}

		days = day1.Distinct().ToList();
	}

	private void GenerateCalendarBody()
	{
		weeks = new List<WeekClass>();

		int flag = 0;
		WeekClass week = new WeekClass();
		List<DayEvent> dates = new List<DayEvent>();
		var totalDays = (int)(endDate - startDate).TotalDays;
		int countDays = 0;

		for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
		{
			flag++;

			dates.Add(new DayEvent()
				{
					DateValue = dt.ToString("dd-MMM-yyyy"),
					DayName = dt.ToString("dddd")
				});

			if (flag == 7)
			{
				week = new WeekClass();
				week.Dates = dates;
				weeks.Add(week);

				dates = new List<DayEvent>();
				flag = 0;
			}

			if (countDays == totalDays)
			{
				week = new WeekClass();
				week.Dates = dates;
				weeks.Add(week);
				break;
			}

			countDays++;
		}
	}

	public class DayEvent
	{
		public DateTime FromDate { get; set; }
		public DateTime ToDate { get; set; }
		public string DateValue { get; set; }
		public string DayName { get; set; }
	}

	public class WeekClass
	{
		public List<DayEvent> Dates { get; set; } = new List<DayEvent>();
	}

	private static string GetCalendarHeadline()
	{
		var currentMonth = DateTime.Now.ToString("MMMM");
		var capitalizedMonth = currentMonth.Substring(0, 1).ToUpper() + currentMonth.Substring(1);
		return capitalizedMonth;
	}

}