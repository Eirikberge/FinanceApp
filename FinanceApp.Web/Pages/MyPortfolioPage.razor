@page "/mystock"
@using System.Text
@using Newtonsoft.Json
@using System.Globalization
@using FinanceApp.Models.Dtos
@using FinanceApp.Web.Models
@using FinanceApp.Web.Components
@inject HttpClient Http

@inherits StockBase


<PageTitle>My Portfolio</PageTitle>

<h1>My Portfolio</h1>

<div>
	<SearchBarComponent Items="_stocks" OnSearch="UpdateFilteredStocks"></SearchBarComponent>
</div>

<br/>
<td><button class="btn btn-primary" @onclick="() => UpdateStock()">Refresh</button></td>

@if (_stocks == null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Symbol</th>
				<th>Name</th>
				<th>BuyingPrice</th>
				<th>CurrentPrice</th>
				<th>Quantity</th>
				<th>Gain</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var stock in _filteredStocks ?? _stocks)
			{
				var gain = Math.Round((stock.CurrentPrice - stock.BuyingPrice) * stock.Qty, 2);
				<tr>
					<td>@stock.Symbol</td>
					<td>@stock.Name</td>
					<td>@stock.BuyingPrice</td>
					<td>@stock.CurrentPrice</td>
					<td>@stock.Qty</td>
					<td>@gain</td>
				</tr>
			}
		</tbody>
	</table>
	<br />
	<table class="table table-bordered table-striped">
		<tr>
			<th style="width: @(100 / 4)%;">Total Worth: @GetTotalWorth() </th>
			<th style="width: @(100 / 4)%;">Risk(beta): 1.2</th>
			<th style="width: @(100 / 4)%;">Total Gain: @GetTotalGain()</th>
			<th style="width: @(100 / 4)%;">Estimated annual dividend: 54 USD</th>
		</tr>
	</table>

	<br />
	<h4 style="text-align: center;">Uke: @GetWeekNumber(DateTime.Now)</h4>

	<CalendarComponent NumberOfDaysToAdd="6" length="week"></CalendarComponent>

}

@code {
	private List<StockDto> _stocks;
	private List<StockDto> _filteredStocks;
	private List<EarningsCalendarDto> _calendarResponsList;

	private string _searchString;

	private DateTime startDate = DateTime.Now;
	private DateTime endDate = DateTime.Now;

	protected override async Task OnInitializedAsync()
	{
		await LoadStocks();
	}

	private async Task LoadStocks()
	{
		var response = await Http.GetAsync("https://localhost:7282/api/stocks");
		if (response.IsSuccessStatusCode)
		{
			_stocks = await response.Content.ReadFromJsonAsync<List<StockDto>>();
			_filteredStocks = _stocks.ToList();
		}
	}

	private async Task UpdateStock()
	{
		foreach (var stock in _stocks)
		{
			var response = await Http.GetAsync($"https://localhost:7282/GetStockPrice/api/getstockprice/{stock.Symbol}");

			if (response.IsSuccessStatusCode)
			{
				var jsonResponse = await response.Content.ReadAsStringAsync();
				var responseObject = JsonConvert.DeserializeObject<StockSearchResponseDto>(jsonResponse);

				stock.CurrentPrice = responseObject.Current;
			}
		}
	}

	private async Task UpdateFilteredStocks(string searchString)
	{
		_filteredStocks = string.IsNullOrEmpty(searchString) ? _stocks :
			_stocks.Where(stock =>
				stock.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
				stock.Symbol.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
	}

	private double GetTotalGain()
	{
		double totalGain = 0;
		@foreach (var stock in _filteredStocks ?? _stocks)
		{
			totalGain += Math.Round((stock.CurrentPrice - stock.BuyingPrice) * stock.Qty, 2);
		}

		return Math.Round(totalGain, 2);
	}

	private double GetTotalWorth()
	{
		double totalWorth = 0;
		@foreach (var stock in _filteredStocks ?? _stocks)
		{
			totalWorth += Math.Round(stock.CurrentPrice * stock.Qty, 2);
		}

		return Math.Round(totalWorth, 2);
	}
	public int GetWeekNumber(DateTime date)
	{
		return CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
	}

	private DateTime GetFirstMondayOfWeek(int year, int weekOfYear)
	{
		DateTime jan1 = new DateTime(year, 1, 1);
		int daysOffset = DayOfWeek.Monday - jan1.DayOfWeek;
		DateTime firstMonday = jan1.AddDays(daysOffset);

		int firstWeek = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(jan1, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

		if (firstWeek <= 1)
		{
			weekOfYear -= 1;
		}

		return firstMonday.AddDays(weekOfYear * 7);
	}

}
