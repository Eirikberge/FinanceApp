@page "/mystock"
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http

<h1>My Stocks</h1>


<form @onsubmit="UpdateFilteredStocks">
	<input type="text" @bind="_searchString" />
	<button type="submit">Search</button>
</form>

@if (_stocks == null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Symbol</th>
				<th>Name</th>
				<th>BuyingPrice</th>
				<th>CurrentPrice</th>
				<th>Quantity</th>
				<th>Gain</th>
				<th></th>

			</tr>
		</thead>
		<tbody>
			@foreach (var stock in _filteredStocks ?? _stocks)
			{
				var gain = Math.Round((stock.CurrentPrice - stock.BuyingPrice) * stock.Qty, 2);
				<tr>
					<td>@stock.Symbol</td>
					<td>@stock.Name</td>
					<td>@stock.BuyingPrice</td>
					<td>@stock.CurrentPrice</td>
					<td>@stock.Qty</td>
					<td>@gain</td>
					<td><button class="btn btn-primary" @onclick="() => UpdateStock(stock)">Refresh</button></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Stock> _stocks;
	private List<Stock> _filteredStocks;

	private string _searchString;
	private float _currentPrice;


	protected override async Task OnInitializedAsync()
	{
		await LoadStocks();
	}

	private async Task LoadStocks()
	{
		var response = await Http.GetAsync("https://localhost:7282/api/getstocks");
		if (response.IsSuccessStatusCode)
		{
			_stocks = await response.Content.ReadFromJsonAsync<List<Stock>>();
			_filteredStocks = _stocks.ToList();
		}
	}

	private void UpdateFilteredStocks()
	{
		_filteredStocks = string.IsNullOrEmpty(_searchString) ? _stocks : _stocks.Where(stock =>
			stock.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
			stock.Symbol.Contains(_searchString, StringComparison.OrdinalIgnoreCase)).ToList();
	}

	private async Task UpdateStock(Stock stock)
	{
		var response = await Http.GetAsync($"https://localhost:7282/stocks/{stock.Symbol}");

		if (response.IsSuccessStatusCode)
		{
			var jsonResponse = await response.Content.ReadAsStringAsync();
			var responseObject = JsonConvert.DeserializeObject<StockSearchResponse>(jsonResponse);

			stock.CurrentPrice = responseObject.Current;
		}
	}
}
