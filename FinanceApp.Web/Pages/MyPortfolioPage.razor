@page "/mystock"
@using Newtonsoft.Json
@using System.Globalization
@using FinanceApp.Models.Dtos
@using FinanceApp.Web.Components
@inject HttpClient Http

@inherits MyPortfolioBase

<PageTitle>My Portfolio</PageTitle>

<h1>My Portfolio</h1>

<SearchBarComponent TEntity="StockDto" OnSearch="UpdateFilteredStocks"></SearchBarComponent>

<br />
<td><button class="btn btn-primary" @onclick="() => UpdateStockPrices()">Refresh</button></td>

@if (Stocks == null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Symbol</th>
				<th>Name</th>
				<th>BuyingPrice</th>
				<th>CurrentPrice</th>
				<th>Quantity</th>
				<th>Gain</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var stock in _filteredStocks ?? Stocks)
			{
				var gain = Math.Round((stock.CurrentPrice - stock.BuyingPrice) * stock.Qty, 2);
				<tr>
					<td>@stock.Symbol</td>
					<td>@stock.Name</td>
					<td>@stock.BuyingPrice</td>
					<td>@stock.CurrentPrice</td>
					<td>@stock.Qty</td>
					<td>@gain</td>
				</tr>
			}
		</tbody>
	</table>
	<br />
	<table class="table table-bordered table-striped">
		<tr>
			<th style="width: @(100 / 4)%;">Total Worth: @GetTotalWorth() </th>
			<th style="width: @(100 / 4)%;">Risk(beta): 1.2</th>
			<th style="width: @(100 / 4)%;">Total Gain: @GetTotalGain()</th>
			<th style="width: @(100 / 4)%;">Estimated annual dividend: 54 USD</th>
		</tr>
	</table>

	<br />
	<h4 style="text-align: center;">Uke: @GetWeekNumber(DateTime.Now)</h4>

	<CalendarComponent Length="week"></CalendarComponent>
}

@code {
	private IEnumerable<StockDto> _filteredStocks;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		if (Stocks == null)
		{
			_filteredStocks = Stocks.ToList();
		}
	}

	private async Task UpdateStockPrices()
	{
		foreach (var stock in Stocks)
		{
			var response = await Http.GetAsync($"https://localhost:7282/GetStockPrice/api/getstockprice/{stock.Symbol}");

			if (response.IsSuccessStatusCode)
			{
				var jsonResponse = await response.Content.ReadAsStringAsync();
				var responseObject = JsonConvert.DeserializeObject<StockSearchResponseDto>(jsonResponse);

				stock.CurrentPrice = responseObject.Current;
			}
		}
	}

	private async Task UpdateFilteredStocks(string searchString)
	{
		_filteredStocks = string.IsNullOrEmpty(searchString) ? Stocks :
			Stocks.Where(stock =>
				stock.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
				stock.Symbol.Contains(searchString, StringComparison.OrdinalIgnoreCase));
	}

	private double GetTotalGain()
	{
		double totalGain = 0;
		@foreach (var stock in Stocks)
		{
			totalGain += Math.Round((stock.CurrentPrice - stock.BuyingPrice) * stock.Qty, 2);
		}
		return Math.Round(totalGain, 2);
	}

	private double GetTotalWorth()
	{
		double totalWorth = 0;
		@foreach (var stock in Stocks)
		{
			totalWorth += Math.Round(stock.CurrentPrice * stock.Qty, 2);
		}
		return Math.Round(totalWorth, 2);
	}

	public int GetWeekNumber(DateTime date)
	{
		return CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
	} // denne er dobbelt, både her og i calendarComponent...
}
