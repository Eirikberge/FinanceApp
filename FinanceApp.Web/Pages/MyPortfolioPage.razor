@page "/mystock"
@using Newtonsoft.Json
@using System.Text
@inject HttpClient Http

<h1>My Stocks</h1>


<form @onsubmit="UpdateFilteredStocks">
	<input type="text" @bind="searchString" />
	<button type="submit">Search</button>
</form>

@if (stocks == null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Symbol</th>
				<th>Name</th>
				<th>BuyingPrice</th>
				<th>CurrentPrice</th>
				<th>Quantity</th>
				<th>Gain</th>
				<th></th>

			</tr>
		</thead>
		<tbody>
				@foreach (var stock in filteredStocks ?? stocks)
				{
					var gain = Math.Round((stock.CurrentPrice - stock.BuyingPrice) * stock.Qty, 2);
					<tr>
						<td>@stock.Symbol</td>
						<td>@stock.Name</td>
						<td>@stock.BuyingPrice</td>
						<td>@stock.CurrentPrice</td>
						<td>@stock.Qty</td>
						<td>@gain</td>
						<td><button class="btn btn-primary" @onclick="() => UpdateStock(stock)">Refresh</button></td>
					</tr>
				}
			</tbody>
	</table>
}

@code {
	private List<Stock> stocks;
	private List<Stock> filteredStocks;

	private string searchString;
	private float CurrentPrice;


	protected override async Task OnInitializedAsync()
	{
		await LoadStocks();
	}

	private async Task LoadStocks()
	{
		var response = await Http.GetAsync("https://localhost:7282/api/getstocks");
		if (response.IsSuccessStatusCode)
		{
			stocks = await response.Content.ReadFromJsonAsync<List<Stock>>();
			filteredStocks = stocks.ToList();
		}
	}

	private void UpdateFilteredStocks()
	{
		filteredStocks = string.IsNullOrEmpty(searchString) ? stocks : stocks.Where(stock =>
			stock.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
			stock.Symbol.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
	}

	async Task UpdateStock(Stock stock)
	{
		var response = await Http.GetAsync($"https://localhost:7282/stocks/{stock.Symbol}");
		
		if (response.IsSuccessStatusCode)
		{
			var jsonResponse = await response.Content.ReadAsStringAsync();
			var responseObject = JsonConvert.DeserializeObject<StockResponse>(jsonResponse);

			stock.CurrentPrice = responseObject.Current;
		}
		
	}
	public class Stock
	{
		public string Name { get; set; }
		public string Symbol { get; set; }
		public float BuyingPrice { get; set; }
		public float CurrentPrice { get; set; }
		public int Qty { get; set; }
	}

	public class StockResponse
	{
		public float Current { get; set; }
		public float Open { get; set; }
		public float Close { get; set; }
		public float High { get; set; }
		public float Low { get; set; }
		public string Time { get; set; }
		public string Symbol { get; set; }
	}
	
}
