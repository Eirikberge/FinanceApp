@page "/mystock"
@using System.Text
@using Newtonsoft.Json
@using System.Globalization
@inject HttpClient Http

<h1>My Stocks</h1>


<form @onsubmit="UpdateFilteredStocks">
	<input type="text" @bind="_searchString" />
	<button type="submit">Search</button>
</form>

@if (_stocks == null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Symbol</th>
				<th>Name</th>
				<th>BuyingPrice</th>
				<th>CurrentPrice</th>
				<th>Quantity</th>
				<th>Gain</th>
				<th></th>

			</tr>
		</thead>
		<tbody>
			@foreach (var stock in _filteredStocks ?? _stocks)
			{
				var gain = Math.Round((stock.CurrentPrice - stock.BuyingPrice) * stock.Qty, 2);
				<tr>
					<td>@stock.Symbol</td>
					<td>@stock.Name</td>
					<td>@stock.BuyingPrice</td>
					<td>@stock.CurrentPrice</td>
					<td>@stock.Qty</td>
					<td>@gain</td>
					<td><button class="btn btn-primary" @onclick="() => UpdateStock(stock)">Refresh</button></td>
				</tr>
			}
		</tbody>
	</table>

	<br />
	<h4 style="text-align: center;">Uke: @GetWeekNumber(DateTime.Now)</h4>

	<table class="table table-bordered table-striped">
		<thead>
			<tr>
				@foreach (var day in days)
				{
					<th style="width: @(100 / days.Count())%;">@day</th>
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var week in weeks)
			{
				<tr>
					@foreach (var day in week.Dates)
					{
						int dag = 1;
						dag++;
						<td>
							@day.DateValue
							<br /><br />
							@dag. dag
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<Stock> _stocks;
	private List<Stock> _filteredStocks;

	private string _searchString;
	private float _currentPrice;

	private List<string> days;
	private List<WeekClass> weeks;
	private DateTime startDate = DateTime.Now;
	private DateTime endDate = DateTime.Now;
	DateTime firstWeekOfMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

	protected override async Task OnInitializedAsync()
	{
		await LoadStocks();

		startDate = GetFirstMondayOfWeek(startDate.Year, GetWeekNumber(startDate));
		endDate = startDate.AddDays(6);

		GenerateCalendarHead();
		GenerateCalendarBody();
	}

	private async Task LoadStocks()
	{
		var response = await Http.GetAsync("https://localhost:7282/api/getstocks");
		if (response.IsSuccessStatusCode)
		{
			_stocks = await response.Content.ReadFromJsonAsync<List<Stock>>();
			_filteredStocks = _stocks.ToList();
		}
	}

	private void UpdateFilteredStocks()
	{
		_filteredStocks = string.IsNullOrEmpty(_searchString) ? _stocks : _stocks.Where(stock =>
			stock.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
			stock.Symbol.Contains(_searchString, StringComparison.OrdinalIgnoreCase)).ToList();
	}

	private async Task UpdateStock(Stock stock)
	{
		var response = await Http.GetAsync($"https://localhost:7282/GetStockPrice/api/getstockprice/{stock.Symbol}");

		if (response.IsSuccessStatusCode)
		{
			var jsonResponse = await response.Content.ReadAsStringAsync();
			var responseObject = JsonConvert.DeserializeObject<StockSearchResponse>(jsonResponse);

			stock.CurrentPrice = responseObject.Current;
		}
	}
	private DateTime GetFirstMondayOfWeek(int year, int weekOfYear)
	{
		DateTime jan1 = new DateTime(year, 1, 1);
		int daysOffset = DayOfWeek.Monday - jan1.DayOfWeek;
		DateTime firstMonday = jan1.AddDays(daysOffset);

		int firstWeek = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(jan1, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

		if (firstWeek <= 1)
		{
			weekOfYear -= 1;
		}

		return firstMonday.AddDays(weekOfYear * 7);
	}

	private void GenerateCalendarHead()
	{
		var day1 = new List<string>();
		for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
		{
			day1.Add(dt.ToString("dddd"));
		}

		days = day1.Distinct().ToList();
	}

	private void GenerateCalendarBody()
	{
		weeks = new List<WeekClass>();

		int flag = 0;
		WeekClass week = new WeekClass();
		List<DayEvent> dates = new List<DayEvent>();
		var totalDays = (int)(endDate - startDate).TotalDays;
		int countDays = 0;

		for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
		{
			flag++;

			dates.Add(new DayEvent()
				{
					DateValue = dt.ToString("dd-MMM-yyyy"),
					DayName = dt.ToString("dddd")
				});

			if (flag == 7)
			{
				week = new WeekClass();
				week.Dates = dates;
				weeks.Add(week);

				dates = new List<DayEvent>();
				flag = 0;
			}

			if (countDays == totalDays)
			{
				week = new WeekClass();
				week.Dates = dates;
				weeks.Add(week);
				break;
			}

			countDays++;
		}
	}

	private int GetWeekNumber(DateTime date)
	{
		return CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
	}

}
